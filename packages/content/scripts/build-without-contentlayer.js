#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const matter = require('gray-matter')

console.log('🔨 Building content without Contentlayer...\n')

const sites = ['automoveis', 'financas', 'tech-news', 'saude-alimentacao', 'viagem-lifestyle', 'portal']

// Função para processar um post
function processPost(filePath, site) {
    try {
        const fileContent = fs.readFileSync(filePath, 'utf8')
        const { data, content } = matter(fileContent)

        const fileName = path.basename(filePath, '.mdx')
        const readingTime = Math.ceil(content.split(' ').length / 200)

        return {
            slug: data.slug || fileName,
            title: data.title || 'Título não encontrado',
            description: data.description || 'Descrição não encontrada',
            date: data.date ? new Date(data.date).toISOString() : new Date().toISOString(),
            tags: Array.isArray(data.tags) ? data.tags : [],
            featured: Boolean(data.featured),
            site: data.site || site,
            draft: Boolean(data.draft),
            readingTime,
            content,
            url: `/${data.slug || fileName}`
        }
    } catch (error) {
        console.error(`Error processing ${filePath}:`, error.message)
        return null
    }
}

// Processar todos os posts
const allPosts = []

sites.forEach(site => {
    const sitePath = path.join(__dirname, '..', 'sites', site)

    if (!fs.existsSync(sitePath)) {
        console.log(`⚠️  Site directory not found: ${site}`)
        return
    }

    const files = fs.readdirSync(sitePath).filter(file => file.endsWith('.mdx'))
    console.log(`📁 Processing ${site}: ${files.length} files`)

    files.forEach(file => {
        const filePath = path.join(sitePath, file)
        const post = processPost(filePath, site)

        if (post) {
            allPosts.push(post)
            console.log(`   ✅ ${file}`)
        } else {
            console.log(`   ❌ ${file}`)
        }
    })
})

// Sortear posts por data
allPosts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())

console.log(`\n📊 Total processed: ${allPosts.length} posts`)

// Criar diretório generated se não existir
const generatedDir = path.join(__dirname, '..', '.contentlayer', 'generated')
if (!fs.existsSync(path.dirname(generatedDir))) {
    fs.mkdirSync(path.dirname(generatedDir), { recursive: true })
}
if (!fs.existsSync(generatedDir)) {
    fs.mkdirSync(generatedDir, { recursive: true })
}

// Gerar arquivo JavaScript
const jsContent = `// Auto-generated by build-without-contentlayer.js
export const allPosts = ${JSON.stringify(allPosts, null, 2)};

export const Post = {
    name: 'Post',
    fields: ['slug', 'title', 'description', 'date', 'tags', 'featured', 'site', 'draft', 'readingTime', 'content', 'url']
};
`

fs.writeFileSync(path.join(generatedDir, 'index.js'), jsContent)

// Gerar arquivo TypeScript
const tsContent = `// Auto-generated by build-without-contentlayer.js
export interface Post {
    slug: string;
    title: string;
    description: string;
    date: string;
    tags: string[];
    featured: boolean;
    site: string;
    draft: boolean;
    readingTime: number;
    content: string;
    url: string;
}

export const allPosts: Post[] = ${JSON.stringify(allPosts, null, 2)};
`

fs.writeFileSync(path.join(generatedDir, 'index.ts'), tsContent)

console.log(`✅ Generated files in .contentlayer/generated/`)
console.log(`🎉 Build completed successfully!`) 