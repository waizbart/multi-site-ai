// Posts est√°ticos como fallback para problemas do Contentlayer no Windows
export interface Post {
    slug: string
    title: string
    description: string
    date: string
    tags: string[]
    site: string
    draft: boolean
    featured: boolean
    readingTime: number
    content: string
}

export const staticPosts: Post[] = [
    {
        slug: 'configurar-monorepo-turborepo',
        title: 'Como Configurar um Monorepo com Turborepo',
        description: 'Aprenda a criar um monorepo eficiente usando Turborepo para gerenciar m√∫ltiplos sites com conte√∫do gerado por IA.',
        date: '2024-12-19',
        tags: ['turborepo', 'monorepo', 'nextjs'],
        site: 'site-template',
        draft: false,
        featured: true,
        readingTime: 8,
        content: `
# Como Configurar um Monorepo com Turborepo

Gerenciar m√∫ltiplos sites pode ser uma tarefa complexa, especialmente quando voc√™ quer manter a consist√™ncia de c√≥digo e facilitar a manuten√ß√£o.

## O que √© um Monorepo?

Um monorepo √© uma estrat√©gia de desenvolvimento onde m√∫ltiplos projetos s√£o armazenados em um √∫nico reposit√≥rio Git. Isso oferece v√°rias vantagens:

- **Compartilhamento de c√≥digo**: Pacotes e componentes podem ser reutilizados entre projetos
- **Sincroniza√ß√£o de vers√µes**: Todas as depend√™ncias ficam alinhadas
- **Refatora√ß√£o simplificada**: Mudan√ßas que afetam m√∫ltiplos projetos podem ser feitas atomicamente

## Setup Completo Funcionando

Este template est√° **100% funcional** e inclui:

- ‚úÖ **Monorepo Turborepo** com npm workspaces
- ‚úÖ **Next.js 14** com App Router
- ‚úÖ **TypeScript** completo
- ‚úÖ **Tailwind CSS + shadcn/ui**
- ‚úÖ **SEO otimizado**
- ‚úÖ **Scripts de IA** para gera√ß√£o de conte√∫do
- ‚úÖ **GitHub Actions** para CI/CD

## Pr√≥ximos Passos

1. Configure suas vari√°veis de ambiente
2. Personalize o design e conte√∫do
3. Configure o deploy na Vercel
4. Ative a gera√ß√£o autom√°tica de conte√∫do

**O projeto est√° pronto para uso!** üöÄ
    `
    },
    {
        slug: 'ia-content-generation',
        title: 'Gera√ß√£o Autom√°tica de Conte√∫do com OpenAI GPT-4o',
        description: 'Como implementar um sistema de gera√ß√£o autom√°tica de posts usando a API da OpenAI.',
        date: '2024-12-18',
        tags: ['openai', 'ia', 'automa√ß√£o'],
        site: 'site-template',
        draft: false,
        featured: false,
        readingTime: 6,
        content: `
# Gera√ß√£o Autom√°tica de Conte√∫do com OpenAI GPT-4o

A intelig√™ncia artificial est√° revolucionando a forma como criamos conte√∫do. Com a API da OpenAI, √© poss√≠vel automatizar a gera√ß√£o de posts de alta qualidade.

## Como Funciona

O sistema utiliza o modelo GPT-4o para gerar conte√∫do baseado em t√≥picos pr√©-definidos:

\`\`\`typescript
async function generatePostContent(topic: string): Promise<PostContent> {
  const completion = await openai.chat.completions.create({
    model: 'gpt-4o',
    messages: [{ role: 'user', content: prompt }],
    temperature: 0.7,
    max_tokens: 2000,
  })
  
  return parseResponse(completion)
}
\`\`\`

## Vantagens

- **Consist√™ncia**: Mant√©m um padr√£o de qualidade
- **Escalabilidade**: Gera m√∫ltiplos posts rapidamente
- **Personaliza√ß√£o**: Adapta-se ao tom da marca
- **Automa√ß√£o**: Funciona 24/7 sem interven√ß√£o

## Implementa√ß√£o

O script est√° localizado em \`packages/content/scripts/generate_posts.ts\` e pode ser executado diariamente via GitHub Actions.

**Resultado**: Conte√∫do de qualidade gerado automaticamente! ü§ñ
    `
    },
    {
        slug: 'seo-nextjs-14',
        title: 'SEO T√©cnico Completo no Next.js 14',
        description: 'Guia completo para implementar SEO t√©cnico com meta tags, JSON-LD e Core Web Vitals.',
        date: '2024-12-17',
        tags: ['seo', 'nextjs', 'performance'],
        site: 'site-template',
        draft: false,
        featured: true,
        readingTime: 10,
        content: `
# SEO T√©cnico Completo no Next.js 14

O SEO t√©cnico √© fundamental para o sucesso de qualquer site. Com Next.js 14, temos ferramentas poderosas para otimizar nossos sites.

## Meta Tags Din√¢micas

\`\`\`typescript
export const metadata: Metadata = {
  title: post.title,
  description: post.description,
  openGraph: {
    title: post.title,
    description: post.description,
    type: 'article',
  },
}
\`\`\`

## JSON-LD Structured Data

Implementamos dados estruturados para melhor indexa√ß√£o:

\`\`\`typescript
const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: post.title,
  description: post.description,
  author: {
    '@type': 'Person',
    name: siteConfig.author.name,
  },
}
\`\`\`

## Core Web Vitals

- **LCP**: Otimizado com Next.js Image
- **FID**: Minimizado com code splitting
- **CLS**: Controlado com dimens√µes fixas

## APIs Autom√°ticas

- \`/api/sitemap\` - Sitemap.xml autom√°tico
- \`/api/robots\` - Robots.txt otimizado
- \`/api/rss\` - Feed RSS atualizado

**Resultado**: Site otimizado para motores de busca! üîç
    `
    }
] 